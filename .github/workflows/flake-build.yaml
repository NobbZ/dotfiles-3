name: flake-build

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:
  check_flake:
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install nix
      uses: ./.github/actions/install-nix
    - name: Flake check
      run: nix flake check

  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.gen_packages.outputs.packages }}
      checks: ${{ steps.gen_checks.outputs.checks }}
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install nix
      uses: ./.github/actions/install-nix
    - name: Generate flake.json
      run: |
        nix flake show --json > flake.json
    - id: gen_packages
      name: Generate package matrix
      run: |
        nix run .#python3 -- ./bin/generate_matrix.py ./flake.json packages
    # - id: gen_checks
    #   run: |
    #     checks=$(jq -c '.checks."x86_64-linux" | keys' < flake.json)
    #     printf "::set-output name=checks::%s" "$checks"

  build_flake:
    runs-on: ubuntu-latest
    needs: [generate_matrix, check_flake]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        package: ${{fromJson(needs.generate_matrix.outputs.packages)}}
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install nix
      uses: ./.github/actions/install-nix
    - name: Set up cachix
      uses: cachix/cachix-action@master
      with:
        name: viperml
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        pathsToPush: result
    - name: Build everything
      run: nix build .#${{ matrix.package }}

  # https://github.community/t/cancelling-rest-of-job-if-condition-is-met/18181
  check_neovim_hash:
    runs-on: ubuntu-latest
    needs: [build_flake]
    outputs:
      bundle_neovim: ${{ steps.compare_drvPath.outputs.bundle_neovim }}
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install nix
      uses: ./.github/actions/install-nix
    - name: Set up cachix
      uses: cachix/cachix-action@master
      with:
        name: viperml
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        pathsToPush: result
    - name: Eval new neovim.drvPath
      run: echo "DRVPATH_NEW=$(nix eval --raw .#neovim.drvPath)" >> $GITHUB_ENV
    - name: Fetch old neovim.drvPath
      run: |
        workflow_run=$(gh run --repo viperML/dotfiles list --workflow neovim-bundle.yaml --json status,databaseId --limit 5 | jq '[.[] | select(.status == "completed")][0].databaseId')
        rm -f drvPath
        gh run --repo viperML/dotfiles download $workflow_run -n drvPath
        echo "DRVPATH_OLD=$(cat drvPath)" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
    - name: Compare the drvPath and set the exit status
      id: compare_drvPath
      run: |
        if [[ ${{ env.DRVPATH_NEW }} == ${{ env.DRVPATH_OLD }} ]]; then
          echo "::set-output name=bundle_neovim::false"
        else
          echo "::set-output name=bundle_neovim::true"
        fi

  request_neovim:
    runs-on: ubuntu-latest
    needs: [check_neovim_hash]
    if: needs.check_neovim_hash.outputs.bundle_neovim == 'true'
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install nix
      uses: ./.github/actions/install-nix
    - name: Run neovim-bundle.yaml
      run: gh workflow run --repo viperML/dotfiles neovim-bundle.yaml --ref master
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
